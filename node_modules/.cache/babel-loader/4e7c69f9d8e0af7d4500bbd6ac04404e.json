{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getBooks = createAsyncThunk(\"book/getBooks\", async (_, thunkAPI) => {\n  const {\n    rejectWithValue\n  } = thunkAPI;\n\n  try {\n    const res = await fetch(\"http://localhost:3005/books\");\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const insertBook = createAsyncThunk(\"book/insertBook\", async (bookData, thunkAPI) => {\n  const {\n    rejectWithValue,\n    getState\n  } = thunkAPI;\n\n  try {\n    console.log(getState()); // const res = await fetch(\"http://localhost:3005/books\", {\n    //   method: \"POST\",\n    //   body: JSON.stringify(bookData),\n    //   headers: {\n    //     \"Content-type\": \"application/json; charset=UTF-8\",\n    //   },\n    // });\n    // const data = await res.json();\n    // return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst bookSlice = createSlice({\n  name: \"book\",\n  initialState: {\n    books: null,\n    isLoading: false,\n    error: null\n  },\n  extraReducers: {\n    // get books\n    [getBooks.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [getBooks.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books = action.payload;\n    },\n    [getBooks.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    // insert books\n    [insertBook.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [insertBook.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books.push(action.payload);\n    },\n    [insertBook.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n}); // export\n\nexport default bookSlice.reducer;","map":{"version":3,"sources":["/media/john/New Volume/WEB Devlopment/Projects/#react.js/redux-book-shop/src/store/bookSlice.js"],"names":["createSlice","createAsyncThunk","getBooks","_","thunkAPI","rejectWithValue","res","fetch","data","json","error","message","insertBook","bookData","getState","console","log","bookSlice","name","initialState","books","isLoading","extraReducers","pending","state","action","fulfilled","payload","rejected","push","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,QAAQ,GAAGD,gBAAgB,CACtC,eADsC,EAEtC,OAAOE,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,QAA5B;;AACA,MAAI;AACF,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,WAAOL,eAAe,CAACK,KAAK,CAACC,OAAP,CAAtB;AACD;AACF,CAXqC,CAAjC;AAcP,OAAO,MAAMC,UAAU,GAAGX,gBAAgB,CACxC,iBADwC,EAExC,OAAOY,QAAP,EAAiBT,QAAjB,KAA8B;AAC5B,QAAM;AAAEC,IAAAA,eAAF;AAAmBS,IAAAA;AAAnB,MAAgCV,QAAtC;;AACA,MAAI;AACFW,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,EAApB,EADE,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAXD,CAWE,OAAOJ,KAAP,EAAc;AACd,WAAOL,eAAe,CAACK,KAAK,CAACC,OAAP,CAAtB;AACD;AACF,CAlBuC,CAAnC;AAqBP,MAAMM,SAAS,GAAGjB,WAAW,CAAC;AAC5BkB,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,SAAS,EAAE,KAA1B;AAAiCX,IAAAA,KAAK,EAAE;AAAxC,GAFc;AAG5BY,EAAAA,aAAa,EAAE;AACb;AACA,KAACpB,QAAQ,CAACqB,OAAV,GAAoB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAACd,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACR,QAAQ,CAACwB,SAAV,GAAsB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB;AACD,KATY;AAUb,KAACzB,QAAQ,CAAC0B,QAAV,GAAqB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACd,KAAN,GAAce,MAAM,CAACE,OAArB;AACD,KAbY;AAcb;AACA,KAACf,UAAU,CAACW,OAAZ,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAACd,KAAN,GAAc,IAAd;AACD,KAlBY;AAmBb,KAACE,UAAU,CAACc,SAAZ,GAAwB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBJ,MAAM,CAACE,OAAxB;AACD,KAtBY;AAuBb,KAACf,UAAU,CAACgB,QAAZ,GAAuB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACd,KAAN,GAAce,MAAM,CAACE,OAArB;AACD;AA1BY;AAHa,CAAD,CAA7B,C,CAiCA;;AACA,eAAeV,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getBooks = createAsyncThunk(\n  \"book/getBooks\",\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI;\n    try {\n      const res = await fetch(\"http://localhost:3005/books\");\n      const data = await res.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const insertBook = createAsyncThunk(\n  \"book/insertBook\",\n  async (bookData, thunkAPI) => {\n    const { rejectWithValue, getState } = thunkAPI;\n    try {\n      console.log(getState());\n      // const res = await fetch(\"http://localhost:3005/books\", {\n      //   method: \"POST\",\n      //   body: JSON.stringify(bookData),\n      //   headers: {\n      //     \"Content-type\": \"application/json; charset=UTF-8\",\n      //   },\n      // });\n      // const data = await res.json();\n      // return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst bookSlice = createSlice({\n  name: \"book\",\n  initialState: { books: null, isLoading: false, error: null },\n  extraReducers: {\n    // get books\n    [getBooks.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [getBooks.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books = action.payload;\n    },\n    [getBooks.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    // insert books\n    [insertBook.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [insertBook.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books.push(action.payload);\n    },\n    [insertBook.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\n// export\nexport default bookSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}